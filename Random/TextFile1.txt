

<i:Interaction.Triggers>
            <i:EventTrigger EventName="PreviewMouseDown">
                <i:InvokeCommandAction Command="{Binding MouseDownCommand}" />
            </i:EventTrigger>
            <i:EventTrigger EventName="PreviewMouseUp">
                <i:InvokeCommandAction Command="{Binding MouseUpCommand}" />
            </i:EventTrigger>

        </i:Interaction.Triggers>
        <i:Interaction.Behaviors>
            <mouseMoveMvvm:MouseBehaviour MouseX="{Binding PanelX, Mode=OneWayToSource}" MouseY="{Binding PanelY, Mode=OneWayToSource}" />
        </i:Interaction.Behaviors>


///////////////////////////////



 <Grid Visibility="Collapsed">
            <Grid.RowDefinitions>
                <RowDefinition Height=".3*" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>

            <Label
            Grid.Row="0"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Content="Select area to record, then click ok button on top right corner."
            FontFamily="Segoe UI Semilight Italic"
            FontSize="30"
            FontWeight="Bold"
            Foreground="White" />

            <Canvas
            Name="CanvasMain"
            Grid.RowSpan="2"
            Background="Transparent"
            MouseDown="canvas1_MouseDown"
            MouseMove="canvas1_MouseMove"
            MouseUp="canvas1_MouseUp">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="PreviewMouseDown">
                        <i:InvokeCommandAction Command="{Binding MouseDownCommand}" />
                    </i:EventTrigger>
                    <i:EventTrigger EventName="PreviewMouseUp">
                        <i:InvokeCommandAction Command="{Binding MouseUpCommand}" />
                    </i:EventTrigger>

                </i:Interaction.Triggers>



                <i:Interaction.Behaviors>
                    <mouseMoveMvvm:MouseBehaviour MouseX="{Binding PanelX, Mode=OneWayToSource}" MouseY="{Binding PanelY, Mode=OneWayToSource}" />
                </i:Interaction.Behaviors>
                <Border
                Name="RecodBorderSizeObject"
                Canvas.Left="200"
                Canvas.Top="200"
                Width="300"
                Height="300"
                BorderBrush="Red"
                BorderThickness="3">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="110" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="110" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>

                        <Rectangle
                        Grid.RowSpan="3"
                        Grid.ColumnSpan="2"
                        Fill="WhiteSmoke"
                        
                        Opacity="0.25" />

                        <Label
                        Grid.Row="0"
                        Grid.Column="0"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Top"
                        HorizontalContentAlignment="Right"
                        Background="Transparent"
                        Content="{Binding RectPoint, Mode=OneWay}"
                        FontSize="20"
                        FontWeight="Bold"
                        Foreground="White" />

                        <Label
                        Grid.Row="0"
                        Grid.Column="1"
                        HorizontalAlignment="Center"
                        Background="Transparent"
                        Content="{Binding PanelX, Mode=OneWay}"
                        ContentStringFormat="Width {0}"
                        FontSize="20"
                        FontWeight="Bold"
                        Foreground="White" />

                        <Label
                        Grid.Row="1"
                        Grid.Column="0"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        Background="Transparent"
                        Content="{Binding PanelY, Mode=OneWay}"
                        ContentStringFormat="Height {0}"
                        FontSize="20"
                        FontWeight="Bold"
                        Foreground="White">
                            <Label.LayoutTransform>
                                <RotateTransform Angle="90" CenterX="0.5" CenterY="0.5" />
                            </Label.LayoutTransform>
                        </Label>


                    </Grid>
                </Border>
            </Canvas>

            <Button
            Grid.Row="0"
            Width="45"
            Height="45"
            Margin="0,10,10,0"
            HorizontalAlignment="Right"
            VerticalAlignment="Top"
            Background="Red"
            Command="{Binding OkCommand}"
            Content="X"
            FontSize="25"
            FontWeight="Bold" />
        </Grid>





////////////////////////////////////////////////////////////////
void Test()
        {
            //SampleStack();
            //GenericStack();
            //Practice();
        }
        void Practice()
        {
            Stack<string> numbers = new Stack<string>();
            numbers.Push("one");
            numbers.Push("two");
            numbers.Push("three");
            numbers.Push("four");
            numbers.Push("five");
            foreach(string number in numbers)
            {
                Console.WriteLine(number);
            }
            Stack<string> stack2 = new Stack<string>(numbers.ToArray());
            Console.WriteLine("\nContents of the first copy:");
            foreach(string number in stack2)
            {
                Console.WriteLine(number);
            }
        }
        void GenericStack()
        {
            Stack<string> numbers = new Stack<string>();
            numbers.Push("one");
            numbers.Push("two");
            numbers.Push("three");
            numbers.Push("four");
            numbers.Push("five");
            // A stack can be enumerated without disturbing its contents.
            foreach(string number in numbers)
            {
                Console.WriteLine(number);
            }
            Console.WriteLine("\nPopping '{0}'", numbers.Pop());
            Console.WriteLine("Peek at next item to destack: {0}",
                numbers.Peek());
            Console.WriteLine("Popping '{0}'", numbers.Pop());
            // Create a copy of the stack, using the ToArray method and the
            // constructor that accepts an IEnumerable<T>.
            Stack<string> stack2 = new Stack<string>(numbers.ToArray());
            Console.WriteLine("\nContents of the first copy:");
            foreach(string number in stack2)
            {
                Console.WriteLine(number);
            }
            // Create an array twice the size of the stack and copy the
            // elements of the stack, starting at the middle of the
            // array.
            string[] array2 = new string[numbers.Count * 2];
            numbers.CopyTo(array2, numbers.Count);
            // Create a second stack, using the constructor that accepts an
            // IEnumerable(Of T).
            Stack<string> stack3 = new Stack<string>(array2);
            Console.WriteLine("\nContents of the second copy, with duplicates and nulls:");
            foreach(string number in stack3)
            {
                Console.WriteLine(number);
            }
            Console.WriteLine("\nstack2.Contains(\"four\") = {0}",
                stack2.Contains("four"));
            Console.WriteLine("\nstack2.Clear()");
            stack2.Clear();
            Console.WriteLine("\nstack2.Count = {0}", stack2.Count);
        }
        private void SampleStack()
        {
            // Creates and initializes a new Stack.
            Stack myStack = new Stack();
            myStack.Push("one");
            myStack.Push("two");
            myStack.Push("three");
            myStack.Push("four");
            // Displays the properties and values of the Stack.
            Console.WriteLine("myStack");
            Console.WriteLine("\tCount:    {0}", myStack.Count);
            Console.Write("\tValues:");
            PrintValues(myStack);
        }
        public void PrintValues(IEnumerable myCollection)
        {
            foreach(Object obj in myCollection)
                Console.Write("    {0}", obj);
            Console.WriteLine();
        }